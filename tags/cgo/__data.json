{"type":"data","nodes":[{"type":"data","data":[{"footer":1},{"html":2,"slug":3,"uuid":4,"created":5,"date":6,"published":7,"abstract":8,"tags":9,"links":-1,"type":10,"cover_image":-1,"description":11,"folder":12},"\u003Cp>Built with SvelteKit and hosted on GitHub Pages.\u003C/p>\n\u003Cp>View this website on \u003Ca href=\"https://github.com/Tiim/Tiim.github.io\" rel=\"nofollow noopener noreferrer\">GitHub\u003C/a>!\u003C/p>\n\u003Ch2>Other pages\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://tiim.ch/pages/links\" rel=\"nofollow noopener noreferrer\">Links and Blogroll\u003C/a>\u003C/li>\n\u003C/ul>","footer","e556fd14-3acd-4a7b-9b31-929fdd6d2b7a",["Date","2023-07-31T20:16:19.000Z"],["Date","2023-07-31T20:16:19.000Z"],true,"\u003Cp>Built with SvelteKit and hosted on GitHub Pages.\u003C/p>",[],"article","","metadata"],"uses":{}},{"type":"data","data":[{"posts":1,"details":24},[2],{"html":3,"slug":4,"uuid":5,"date":6,"created":7,"aliases":8,"title":10,"published":11,"modified":9,"description":12,"cover_image":-1,"cover_image_txt":13,"content_tags":14,"abstract":18,"tags":19,"links":-1,"type":20,"folder":21,"comments":22,"latestComment":23},"\u003Cp>Today I ran into the an error trying to deploy my go app in docker, where the container refused to start with the extremely helpful message \u003Ccode>exec /app/indiego: no such file or directory\u003C/code>. I had removed the \u003Ccode>CGO_ENABLE=0\u003C/code> variable from the Dockerfile, because I needed to enable cgo for a library. What I found out was that when enabling cgo, the resulting binary is not statically linked anymore and now depends on libc or musl. Since the \u003Ccode>scratch\u003C/code> image does not contain literally anything, the binary can't find the libraries and crashes with the aforementioned error.\u003C/p>\n\u003Cp>To include libc into the container, I simply changed the base image from \u003Ccode>scratch\u003C/code> to \u003Ccode>alpine\u003C/code>, which includes libc. This makes the image slightly larger but this seemed way easier than trying to include libc directly.\u003C/p>\n\u003Cp>As a bonus I got to delete the \u003Ccode>/usr/share/zoneinfo\u003C/code> and \u003Ccode>ca-certificates.crt\u003C/code> files, and rely on those provided by alpine.\u003C/p>\n\u003Cp>You can see the commit to IndieGo \u003Ca href=\"https://github.com/Tiim/IndieGo/commit/63968814de7e39f295386bf398b583aa8bf0411c\" rel=\"nofollow noopener noreferrer\">here\u003C/a>.\u003C/p>","blog/2023-01-24-no-such-file-or-directory-cgo","dd580343-9e0f-4754-93dd-25667e6b5859",["Date","2023-01-24T00:00:00.000Z"],["Date","2023-01-24T20:54:11.330Z"],[9],null,"\"no such file or directory\" after enabling CGO in Docker",true,"Quick fix for the \"no such file or directory\" error after enabling CGO, when running in a scratch docker image.","",[15,16,17],"go","cgo","docker","\u003Cp>Today I ran into the an error trying to deploy my go app in docker, where the container refused to start with the extremely helpful message \u003Ccode>exec /app/indiego: no such file or directory\u003C/code>. I had removed the \u003Ccode>CGO_ENABLE=0\u003C/code> variable from the Dockerfile, because I needed to enable cgo for a library. What I found out was that when enabling cgo, the resulting binary is not statically linked anymore and now depends on libc or musl. Since the \u003Ccode>scratch\u003C/code> image does not contain literally anything, the binary can't find the libraries and crashes with the aforementioned error.\u003C/p>",[16,17,15],"article","blog",[],"2024-01-20T09:36:14Z",{"tag":16}],"uses":{"params":["slug"]}}]}
