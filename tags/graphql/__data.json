{"type":"data","nodes":[{"type":"data","data":[{"footer":1},{"html":2,"slug":3,"uuid":4,"created":5,"date":6,"published":7,"abstract":8,"tags":9,"links":-1,"type":10,"cover_image":-1,"description":11,"folder":12},"\u003Cp>Built with SvelteKit and hosted on GitHub Pages.\u003C/p>\n\u003Cp>View this website on \u003Ca href=\"https://github.com/Tiim/Tiim.github.io\" rel=\"nofollow noopener noreferrer\">GitHub\u003C/a>!\u003C/p>\n\u003Ch2>Other pages\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://tiim.ch/pages/links\" rel=\"nofollow noopener noreferrer\">Links and Blogroll\u003C/a>\u003C/li>\n\u003C/ul>","footer","e556fd14-3acd-4a7b-9b31-929fdd6d2b7a",["Date","2023-07-31T20:16:19.000Z"],["Date","2023-07-31T20:16:19.000Z"],true,"\u003Cp>Built with SvelteKit and hosted on GitHub Pages.\u003C/p>",[],"article","","metadata"],"uses":{}},{"type":"data","data":[{"posts":1,"details":57},[2,34],{"html":3,"slug":4,"uuid":5,"date":6,"created":7,"aliases":8,"title":10,"published":11,"modified":9,"description":12,"cover_image":13,"content_tags":14,"abstract":19,"tags":20,"links":-1,"type":22,"folder":23,"comments":24,"latestComment":33},"\u003Cp>In this blog post, I will explain why server-side rendering with the \u003Ca href=\"https://formidable.com/open-source/urql/docs/api/svelte/\" rel=\"nofollow noopener noreferrer\">urql\u003C/a> GraphQL library is not as straightforward to do with SvelteKit, and how I solved this in my project anyway.\u003C/p>\n\u003Cp>Server-side rendering (SSR) is one of the great features of SvelteKit. I will try to keep this blog post short and will therefore not explain what server-side rendering is and why you should take advantage of it \u003Cem>(you really should!)\u003C/em>. If you want to know more about SSR you can take a look at this article: \u003Ca href=\"https://towardsdev.com/server-side-rendering-srr-in-javascript-a1b7298f0d04\" rel=\"nofollow noopener noreferrer\">A Deep Dive into Server-Side Rendering (SSR) in JavaScript\u003C/a>.\u003C/p>\n\u003Ch2>Background - SSR in SvelteKit\u003C/h2>\n\u003Cp>SvelteKit implements SSR by providing a \u003Ca href=\"https://kit.svelte.dev/docs/load\" rel=\"nofollow noopener noreferrer\">\u003Ccode>load\u003C/code> function\u003C/a> for every layout and page component. If a page or layout needs to perform some asynchronous operation, this should be done inside of this load function. SvelteKit executes this function asynchronously on the server side as well as on the client side and the return value of this function is assigned to the \u003Ccode>data\u003C/code> prop of the associated component. Usually, this asynchronous operation is loading data from an external service, like in the case of this blog post a GraphQL server.\nYou can of course load data directly in the component, but SvelteKit will not wait for this to complete when doing SSR, and the resulting HTML will not include the loaded data.\u003C/p>\n\u003Ch2>Background - @urql/svelte\u003C/h2>\n\u003Cp>The urql library allows us to easily issue GraphQL queries and mutations. Some of the functionality it has to make our lives easier include:\u003C/p>\n\u003Cul>\n\u003Cli>Reloading a query when a query variable changes\u003C/li>\n\u003Cli>Reloading a query after a mutation that touches the same data as the query\u003C/li>\n\u003C/ul>\n\u003Cp>We want to keep these features, even when using urql when doing SSR.\u003C/p>\n\u003Ch2>The Problem\u003C/h2>\n\u003Cp>When implementing SSR in my project, I ran into two problems. I couldn't find any documentation or any articles solving them, so I decided to write down my solutions to those problems in this blog post.\u003C/p>\n\u003Ch3>Problem 1 - Svelte and urql Reactivity\u003C/h3>\n\u003Cp>Let's say we have the following load function, which executes a GraphQL query to load a list of red cars:\u003C/p>\n\u003Cpre>\u003Ccode class=\"language-js\">// src/routes/car/+page.js\n\n/** @type {import('./$types').PageLoad} */\nexport function load(event) {\n  const client = createClient({\n    url: config.url,\n    fetch: event.fetch,\n  });\n\n  const carColor = \"red\";\n\n  const cars = client\n    .query(carsQuery, {\n      color: carColor,\n    })\n    .toPromise()\n    .then((c) => c.data?.car);\n\n  return {\n    cars,\n  };\n}\n\u003C/code>\u003C/pre>\n\u003Cp>This example uses the urql method \u003Ccode>client.query\u003C/code> to start a query to get us a list of cars with a red colour (The GraphQL query is not shown but the exact query is not important for this example).\nThe client gets a \u003Ca href=\"https://kit.svelte.dev/docs/load#input-methods-fetch\" rel=\"nofollow noopener noreferrer\">special fetch function\u003C/a> from the event which has a few nice properties, like preventing a second network request on the client side if that same request was just issued on the server-side.\u003C/p>\n\u003Cp>Since the query code is now located in the load function and not in a svelte component, there is no way to easily change the \u003Ccode>carColor\u003C/code> and have urql automatically reload the query. The only way to change the variable is to set the value as a query parameter and read that from the \u003Ccode>event\u003C/code> argument. This however means that we have to refresh the whole page just to reload this query.\u003C/p>\n\u003Cp>The other thing urql does for us, reloading the query when we do a mutation on the same data, will not work with the above code either.\u003C/p>\n\u003Ch3>The solution: A query in the load function and a query in the component\u003C/h3>\n\u003Cp>To fix those two drawbacks we have to add the same query as in the load function to our component code as well. Unfortunately, this means when a user loads the page, it sends a request from the client side, even though the same request got sent from the server side already.\u003C/p>\n\u003Cp>I created a small wrapper function \u003Ccode>queryStoreInitialData\u003C/code> that creates the query inside of the component and intelligently switches from the (possibly stale) data from the load function to the new data. Using this wrapper, the page or layout might look as follows:\u003C/p>\n\u003Cpre>\u003Ccode class=\"language-svelte\">&#x3C;script>\n  import { queryStoreInitialData } from \"@/lib/gql-client\"; // The helper function mentioned above\n  import { getContextClient } from \"@urql/svelte\";\n  import { carsQuery } from \"./query\"; // The query\n\n  export let data;\n\n  $: gqlStore = queryStoreInitialData(\n    {\n      client: getContextClient(),\n      query: carsQuery,\n    },\n    data.cars\n  );\n  $: cars = $gqlStore?.data?.car;\n&#x3C;/script>\n\n&#x3C;div>\n  &#x3C;pre>\n    {JSON.stringify(cars, null, 2)}\n  &#x3C;/pre>\n&#x3C;/div>\n\u003C/code>\u003C/pre>\n\u003Col>\n\u003Cli>The native \u003Ccode>queryStore\u003C/code> function gets replaced with the wrapper function.\u003C/li>\n\u003Cli>The initial value of the query is supplied to the wrapper\u003C/li>\n\u003C/ol>\n\u003Cp>Unfortunately, we can not return the query result from the load function directly like this:\u003C/p>\n\u003Cpre>\u003Ccode class=\"language-js\">const result = await client.query(cars, {}).toPromise();\n\nreturn {\n  cars: toInitialValue(result),\n};\n\u003C/code>\u003C/pre>\n\u003Cp>This results in the following error:\u003C/p>\n\u003Cpre>\u003Ccode class=\"language-stacktrace\">Cannot stringify a function (data.events.operation.context.fetch)\nError: Cannot stringify a function (data.events.operation.context.fetch)\n    at render_response (file:///app/node_modules/@sveltejs/kit/src/runtime/server/page/render.js:181:20)\n    at runMicrotasks (&#x3C;anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n    at async render_page (file:///app/node_modules/@sveltejs/kit/src/runtime/server/page/index.js:276:10)\n    at async resolve (file:///app/node_modules/@sveltejs/kit/src/runtime/server/index.js:232:17)\n    at async respond (file:///app/node_modules/@sveltejs/kit/src/runtime/server/index.js:284:20)\n    at async file:///app/node_modules/@sveltejs/kit/src/exports/vite/dev/index.js:406:22\n\u003C/code>\u003C/pre>\n\u003Cp>This is because the query result contains data that is not serializable.\nTo fix this I created the \u003Ccode>toInitialValue\u003C/code> function, which deletes all non-serializable elements from the result. The load function now looks like follows;\u003C/p>\n\u003Cpre>\u003Ccode class=\"language-js\">// src/routes/car/+page.js\nimport { createServerClient, toInitialValue } from \"@/lib/gql-client\";\nimport { parse } from \"cookie\";\nimport { carsQuery } from \"./query\";\n\n/** @type {import('./$types').PageServerLoad} */\nexport const load = async (event) => {\n  const client = createClient({\n    url: config.url,\n    fetch: event.fetch,\n  });\n\n  const result = await client.query(cars, {}).toPromise();\n\n  return {\n    cars: toInitialValue(result),\n  };\n};\n\u003C/code>\u003C/pre>\n\u003Ch3>Problem 2 - Authentication\u003C/h3>\n\u003Cp>We will look at the same \u003Ccode>load\u003C/code> function as #Problem 1 - Svelte and urql Reactivity: the function creates a urql client with the fetch function from the event object and uses this client to send a query.\u003C/p>\n\u003Cp>Sometimes however the GraphQL API requires authentication in the form of a cookie to allow access.\u003C/p>\n\u003Cp>Unfortunately, the \u003Ca href=\"https://kit.svelte.dev/docs/load#input-methods-fetch\" rel=\"nofollow noopener noreferrer\">fetch function that we get from the load event\u003C/a> will only pass the cookies on if the requested domain is the same as the base domain or a more specific subdomain of it. This means if your SvelteKit site runs on \u003Ccode>example.com\u003C/code> and your GraphQL server runs on \u003Ccode>gql.example.com\u003C/code> then the cookies will get forwarded and everything is fine. This however is, in my experience, often not the case. Either you might use an external service for your GraphQL API or you host it yourself and want to use its internal domain.\u003C/p>\n\u003Cp>The only way to pass the cookies on to the GraphQL server, in this case, is by manually setting the cookie header when creating the urql client. This however forces us to use the server-only load function, as we do not have access to the cookie header in the normal load function.\u003C/p>\n\u003Cp>The new code now looks like this:\u003C/p>\n\u003Cpre>\u003Ccode class=\"language-js\">// /src/routes/car/+page.server.js\n\n/** @type {import('./$types').PageServerLoad} */\nexport function load(event) {\n  const client = createClient({\n    url: config.url,\n    fetch,\n    fetchOptions: {\n      credentials: \"include\",\n      headers: {\n        // inject the cookie header\n        // FIXME: change the cookie name\n        Cookie: `gql-session=${event.cookies.get(\"gql-session\")}`,\n      },\n    },\n  });\n\n  const cars = client.query(carsQuery, {}).toPromise();\n\n  return {\n    cars: toInitialValue(result),\n  };\n}\n\u003C/code>\u003C/pre>\n\u003Cp>To keep the size of the load functions across my codebase smaller I created a small wrapper function \u003Ccode>createServerClient\u003C/code>:\u003C/p>\n\u003Cpre>\u003Ccode class=\"language-js\">// /src/routes/car/+page.server.js\n\n/** @type {import('./$types').PageServerLoad} */\nexport function load(event) {\n  const client = createServerClient(event.cookies);\n\n  const cars = client.query(carsQuery, {}).toPromise();\n\n  return {\n    cars: toInitialValue(result),\n  };\n}\n\u003C/code>\u003C/pre>\n\u003Ch2>The Code\u003C/h2>\n\u003Cp>Below you can find the three functions \u003Ccode>createServerClient\u003C/code>, \u003Ccode>queryStoreInitialData\u003C/code> and \u003Ccode>toInitialValue\u003C/code> that we used above:\u003C/p>\n\u003Cpre>\u003Ccode class=\"language-js\">// /src/lib/gql-client.js\n\nimport { browser } from \"$app/environment\";\nimport { urls } from \"@/config\";\nimport { createClient, queryStore } from \"@urql/svelte\";\nimport { derived, readable } from \"svelte/store\";\n\n/**\n * Helper function to create an urql client for a server-side-only load function\n *\n *\n * @param {import('@sveltejs/kit').Cookies} cookies\n * @returns\n */\nexport function createServerClient(cookies) {\n  return createClient({\n    // FIXME: adjust your graphql url\n    url: urls.gql,\n    fetch,\n    // FIXME: if you don't need to authenticate, delete the following object:\n    fetchOptions: {\n      credentials: \"include\",\n      headers: {\n        // FIXME: if you want to set a cookie adjust the cookie name\n        Cookie: `gql-session=${cookies.get(\"gql-session\")}`,\n      },\n    },\n  });\n}\n\n/**\n * Helper method to send a GraphQL query but use the data from the SvelteKit load function initially.\n *\n *\n * @param {any} queryArgs\n * @param {any} initialValue\n * @returns\n */\nexport function queryStoreInitialData(queryArgs, initialValue) {\n  if (!initialValue || (!initialValue.error &#x26;&#x26; !initialValue.data)) {\n    throw new Error(\"No initial value from server\");\n  }\n\n  let query = readable({ fetching: true });\n  if (browser) {\n    query = queryStore(queryArgs);\n  }\n\n  return derived(query, (value, set) => {\n    if (value.fetching) {\n      set({ ...initialValue, source: \"server\", fetching: true });\n    } else {\n      set({ ...value, source: \"client\" });\n    }\n  });\n}\n\n/**\n * Make the result object of a urql query serialisable.\n *\n *\n * @template T\n * @param {Promise&#x3C;import('@urql/svelte').OperationResult&#x3C;T, any >>|import('@urql/svelte').OperationResult&#x3C;T, any >} result\n * @returns {Promise&#x3C;{fetching:false, error: undefined | {name?: string, message?: string; graphQLErrors?: any[]; networkError?: Error; response?: any;}, data: T|undefined}>}\n */\nexport async function toInitialValue(result) {\n  const { error, data } = await result;\n\n  // required to turn class array into array of javascript objects\n  const errorObject = error ? {} : undefined;\n  if (errorObject) {\n    console.warn(error);\n    errorObject.graphQLErrors = error?.graphQLErrors?.map((e) => ({ ...e }));\n    errorObject.networkError = { ...error?.networkError };\n    errorObject.response = { value: \"response omitted\" };\n  }\n\n  return {\n    fetching: false,\n    error: { ...error, ...errorObject },\n    data,\n  };\n}\n\u003C/code>\u003C/pre>\n\u003Cp>\u003Ca href=\"https://gist.github.com/Tiim/1adeb4d74ce7ae09d0d0aa4176a6195d\" rel=\"nofollow noopener noreferrer\">Link to the Gist\u003C/a>\u003C/p>\n\u003Ch2>End remarks\u003C/h2>\n\u003Cp>Even though I think this solution is not too bad, I wish @urql/svelte would implement a better way to handle SSR with sveltekit. I posted a \u003Ca href=\"https://github.com/FormidableLabs/urql/discussions/2703\" rel=\"nofollow noopener noreferrer\">question on the urql GitHub discussions board\u003C/a>, but I have not gotten any response yet.\u003C/p>\n\u003Cblockquote class=\"callout callout-info\">\n\u003Cspan class=\"callout-title\">\u003Cspan class=\"callout-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\u003Cpath d=\"M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0 0 114.6 0 256s114.6 256 256 256zm-40-176h24v-64h-24c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24h-80c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-144c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z\">\u003C/path>\u003C/svg>\u003C/span>Info\u003C/span>\u003Cp>This article was written with \u003Ccode>@svelte/kit\u003C/code> version \u003Ccode>1.0.0-next.499\u003C/code> and \u003Ccode>@urql/svelte\u003C/code> version \u003Ccode>3.0.1\u003C/code>.\nI will try to update this article as I update my codebase to newer versions.\u003C/p>\n\u003C/blockquote>\n\u003Cp>If this post helped you, or you found a better or different way to solve SSR with urql, please let me know in the comments, write me an email or tag me on twitter \u003Ca href=\"https://twitter.com/TiimB\" rel=\"nofollow noopener noreferrer\">@TiimB\u003C/a>.\u003C/p>","blog/2022-09-27-sveltekit-ssr-with-urql","1e223cab-bca2-4b3b-a75a-71f158c90cba",["Date","2022-09-26T00:00:00.000Z"],["Date","2022-09-26T08:55:23.886Z"],[9],null,"SvelteKit Server-Side Rendering (SSR) with @urql/svelte",true,"Learn why server-side rendering (SSR) using urql as a GraphQL client is not as straightforward as you might think and how to do it anyway.","https://i.imgur.com/5DBIbbT.png",[15,16,17,18],"urql","sveltekit","SSR","graphql","\u003Cp>In this blog post, I will explain why server-side rendering with the \u003Ca href=\"https://formidable.com/open-source/urql/docs/api/svelte/\">urql\u003C/a> GraphQL library is not as straightforward to do with SvelteKit, and how I solved this in my project anyway.\u003C/p>",[18,21,16,15],"ssr","article","blog",[25],{"id":26,"type":27,"replyTo":28,"timestamp":29,"page":4,"url":30,"content":31,"name":32},"a38babef-2c4c-41e6-a748-8723b6cc34ef","comment","","2023-02-05T00:02:51Z","https://tiim.ch/blog/2022-09-27-sveltekit-ssr-with-urql#a38babef-2c4c-41e6-a748-8723b6cc34ef","Hi\n\ninspiring article. Anyway, inspired with it I tried to find more seamless integration - get SSR rendered queries but keep original interface. \n\nYou may be interested in my approach, it's dropped in discussion you open \nhttps://github.com/urql-graphql/urql/discussions/2703","Farin","2024-01-20T09:36:14Z",{"html":35,"slug":36,"uuid":37,"title":38,"date":39,"modified":40,"section":41,"published":11,"content_tags":42,"links":49,"abstract":53,"tags":54,"type":22,"cover_image":-1,"description":28,"folder":55,"comments":56,"latestComment":33},"\u003Cp>An internal web app for swim schools. Developed specifically for the \"Kids\" program of \u003Ca href=\"https://www.swiss-aquatics.ch/sport-fuer-alle/kids-learn-to-swim/ausbildungssystem/\" rel=\"nofollow noopener noreferrer\">Swiss Aquatics\u003C/a>. Live in production at the Aqualetics swim school since August 2019.\u003C/p>\n\u003Cp>The web app allows swim instructors to track students attendance, rate their progress for objectives and provide written feedback to the parents.\nThe admin page has functionality for importing and exporting students, lessons, practice objectives as well as pdf documents suited for distribution to customers. The app is currently in use by over 10 swim instructors and back office admins.\u003C/p>\n\u003Cp>\u003Cimg src=\"/assets/aqualetics-coach-screenshot.png\" alt=\"Screenshot of the coaches view\">\u003C/p>\n\u003Cp>The app is built using a Node.js, PostgreSQL, Hasura and Vue.js tech stack and runs in docker containers. The project started without Hasura and the API was manually built in node. Fortunately Hasura provides most of that functionality out of the box, so I was able to replace 90% of the backend code with it.\u003C/p>","projects/aqualetics-coach","3210d289-1f9e-41b5-b1f9-d20f00f6a0c5","Aqualetics Coach",["Date","2022-03-05T20:21:10.000Z"],["Date","2022-06-08T20:15:48.000Z"],"Projects",[43,44,18,45,46,47,48],"node","vue","hasura","postgresql","docker","dev",[50,51,52],"\u003Cp>\u003Ca href=\"https://sundrbi.ch/coach-application/\" rel=\"nofollow noopener noreferrer\">Overview\u003C/a>\u003C/p>","\u003Cp>\u003Ca href=\"https://aqualetics.ch/2019/09/15/schwimmcoach-applikation-innovation/\" rel=\"nofollow noopener noreferrer\">Blog Post 🇩🇪\u003C/a>\u003C/p>","\u003Cp>\u003Ca href=\"https://aqualetics.ch\" rel=\"nofollow noopener noreferrer\">Aqualetics Swim School\u003C/a>\u003C/p>","\u003Cp>An internal web app for swim schools. Developed specifically for the \"Kids\" program of \u003Ca href=\"https://www.swiss-aquatics.ch/sport-fuer-alle/kids-learn-to-swim/ausbildungssystem/\">Swiss Aquatics\u003C/a>. Live in production at the Aqualetics swim school since August 2019.\u003C/p>",[48,47,18,45,43,46,44],"projects",[],{"tag":18}],"uses":{"params":["slug"]}}]}
