{"type":"data","nodes":[{"type":"data","data":[{"footer":1},{"html":2,"slug":3,"uuid":4,"created":5,"date":6,"published":7,"abstract":8,"tags":9,"links":-1,"type":10,"cover_image":-1,"description":11,"folder":12},"\u003Cp>Built with SvelteKit and hosted on GitHub Pages.\u003C/p>\n\u003Cp>View this website on \u003Ca href=\"https://github.com/Tiim/Tiim.github.io\" rel=\"nofollow noopener noreferrer\">GitHub\u003C/a>!\u003C/p>\n\u003Ch2>Other pages\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://tiim.ch/pages/links\" rel=\"nofollow noopener noreferrer\">Links and Blogroll\u003C/a>\u003C/li>\n\u003C/ul>","footer","e556fd14-3acd-4a7b-9b31-929fdd6d2b7a",["Date","2023-07-31T20:16:19.000Z"],["Date","2023-07-31T20:16:19.000Z"],true,"\u003Cp>Built with SvelteKit and hosted on GitHub Pages.\u003C/p>",[],"article","","metadata"],"uses":{}},{"type":"data","data":[{"posts":1,"details":195},[2,24,93,171],{"html":3,"slug":4,"uuid":5,"date":6,"created":7,"aliases":8,"title":10,"published":11,"modified":9,"description":12,"cover_image":-1,"cover_image_txt":13,"content_tags":14,"abstract":18,"tags":19,"links":-1,"type":20,"folder":21,"comments":22,"latestComment":23},"\u003Cp>Today I ran into the an error trying to deploy my go app in docker, where the container refused to start with the extremely helpful message \u003Ccode>exec /app/indiego: no such file or directory\u003C/code>. I had removed the \u003Ccode>CGO_ENABLE=0\u003C/code> variable from the Dockerfile, because I needed to enable cgo for a library. What I found out was that when enabling cgo, the resulting binary is not statically linked anymore and now depends on libc or musl. Since the \u003Ccode>scratch\u003C/code> image does not contain literally anything, the binary can't find the libraries and crashes with the aforementioned error.\u003C/p>\n\u003Cp>To include libc into the container, I simply changed the base image from \u003Ccode>scratch\u003C/code> to \u003Ccode>alpine\u003C/code>, which includes libc. This makes the image slightly larger but this seemed way easier than trying to include libc directly.\u003C/p>\n\u003Cp>As a bonus I got to delete the \u003Ccode>/usr/share/zoneinfo\u003C/code> and \u003Ccode>ca-certificates.crt\u003C/code> files, and rely on those provided by alpine.\u003C/p>\n\u003Cp>You can see the commit to IndieGo \u003Ca href=\"https://github.com/Tiim/IndieGo/commit/63968814de7e39f295386bf398b583aa8bf0411c\" rel=\"nofollow noopener noreferrer\">here\u003C/a>.\u003C/p>","blog/2023-01-24-no-such-file-or-directory-cgo","dd580343-9e0f-4754-93dd-25667e6b5859",["Date","2023-01-24T00:00:00.000Z"],["Date","2023-01-24T20:54:11.330Z"],[9],null,"\"no such file or directory\" after enabling CGO in Docker",true,"Quick fix for the \"no such file or directory\" error after enabling CGO, when running in a scratch docker image.","",[15,16,17],"go","cgo","docker","\u003Cp>Today I ran into the an error trying to deploy my go app in docker, where the container refused to start with the extremely helpful message \u003Ccode>exec /app/indiego: no such file or directory\u003C/code>. I had removed the \u003Ccode>CGO_ENABLE=0\u003C/code> variable from the Dockerfile, because I needed to enable cgo for a library. What I found out was that when enabling cgo, the resulting binary is not statically linked anymore and now depends on libc or musl. Since the \u003Ccode>scratch\u003C/code> image does not contain literally anything, the binary can't find the libraries and crashes with the aforementioned error.\u003C/p>",[16,17,15],"article","blog",[],"2024-01-20T09:36:14Z",{"html":25,"slug":26,"uuid":27,"date":28,"aliases":29,"title":30,"published":11,"modified":31,"description":32,"cover_image":33,"content_tags":34,"syndication":40,"abstract":42,"tags":43,"links":-1,"type":20,"folder":21,"comments":46,"latestComment":23},"\u003Cp>A few weeks ago, I stumbled on one of \u003Ca href=\"https://www.jvt.me/posts/2019/08/21/rsvp-from-your-website/\" rel=\"nofollow noopener noreferrer\">Jamie Tanna's blog posts about microformats2\u003C/a> by accident. That is when I first learned about the wonderful world of the \u003Ca href=\"https://indieweb.org/why\" rel=\"nofollow noopener noreferrer\">IndieWeb\u003C/a>. It took me a while to read through some of the concepts of the IndieWeb like webmentions, IndieAuth, microformats and all the other standards, but the more I found out about it the more I wanted to play around with it. And what better place to try out new technology than on a personal website?\u003C/p>\n\u003Ch2>The IndieWeb\u003C/h2>\n\u003Cp>I will start with a brief introduction for the uninitiated. If you have already heard about the IndieWeb, feel free to skip to the next section.\u003C/p>\n\u003Cp>The IndieWeb is a collection of standards, intending to make the web social, without the user giving up ownership of their data. While on social media platforms (or as called in IndieWeb terms: silos) you can easily communicate with others, you are always subject to the whims of those platforms.\u003C/p>\n\u003Cp>The IndieWeb wants to solve this by defining standards that, once implemented in a website, allow it to communicate with other websites that are also part of the IndieWeb.\u003C/p>\n\u003Cp>The most important concept of the IndieWeb is, you have control over your data. All of your shared data lives on a domain you control.\u003C/p>\n\u003Cp>Some of the standards in the IndieWeb include:\u003C/p>\n\u003Cul>\n\u003Cli>Microformats2: a way to add structured data to the HTML source code of a website so machines can interpret the data.\u003C/li>\n\u003Cli>Webmentions: a simple communication protocol between websites. It can be used to show comments, likes, bookmarks and more on one website, while the data stays on another website.\u003C/li>\n\u003Cli>IndieAuth, an OAuth2-based way to log in using only your domain name.\u003C/li>\n\u003C/ul>\n\u003Ch2>The implementation on my website\u003C/h2>\n\u003Cp>As explained in my earlier post \u003Ca href=\"https://tiim.ch/blog/2022-07-12-first-go-project-commenting-api\" rel=\"nofollow noopener noreferrer\">First Go Project: A Jam-stack Commenting API\u003C/a>, my website is a statically built SvelteKit app hosted on GitHub Pages. This means the most important part of the IndieWeb is already implemented: I own this domain and post my content here.\u003C/p>\n\u003Ch3>Making the website machine-readable with Microformats\u003C/h3>\n\u003Cp>As mentioned above, the microformats2 standard allows websites to encode data about the page in a machine-readable format. This is accomplished by annotating HTML elements with some predefined class names. For example, the microformat for a blog post, note and other content is called \u003Ca href=\"http://microformats.org/wiki/h-entry\" rel=\"nofollow noopener noreferrer\">h-entry\u003C/a>. By adding the \u003Ccode>h-entry\u003C/code> class to a div, its content is marked as belonging to that post. Children of this div can in turn have other microformat elements such as \u003Ccode>p-name\u003C/code>, \u003Ccode>p-author\u003C/code> or \u003Ccode>dt-published\u003C/code>.\u003C/p>\n\u003Cp>While these CSS classes make the data machine-interpretable, the same data is still available to the user. There is no duplication like for example the meta tags in OpenGraph.\u003C/p>\n\u003Cp>Since my page is a custom SvelteKit app, it was easy enough to add the CSS classes to the right places. I even took the opportunity to add some more information to the pages, like the author card you see if you scroll to the bottom of this post.\u003C/p>\n\u003Ch3>Accepting comments and other interactions via Webmentions\u003C/h3>\n\u003Cp>The standard I wanted to play around with the most are webmentions. A webmention is a sort of notification sent from one website A to another website B, telling B that A has a page linking to it.\u003C/p>\n\u003Cp>In the IndieWeb all types of interactions are just web pages. The microformats2 specification for example allows replies, quotes, likes, bookmarks and many other types of interactions. The receiver of the webmention is free to extract any relevant information from the sender page and might display it, for example as a comment.\u003C/p>\n\u003Cp>Since I already have a \u003Ca href=\"https://github.com/Tiim/IndieGo\" rel=\"nofollow noopener noreferrer\">small custom service\u003C/a> running for the comment section on this site, I decided to add support to it for receiving webmentions. I refactored the comment system quite a bit to make it more modular and extendable, to allow me to add webmentions\u003C/p>\n\u003Cp>It currently supports all the required and some optional features for receiving webmentions: The first thing it does is validate the mention. A mention is only valid if the source and target URLs are valid and if the page from the source URL links to the target URL. The next step is extracting some microformat content from the source URL and saving it to the database.\nI found some things unexpectedly tricky to implement: for example, a repeated webmention with the same source URL should update the previously saved webmention if the link to the target page is still there, but delete the webmention if the link was removed.\u003C/p>\n\u003Cp>I have tested my webmentions implementation using \u003Ca href=\"https://webmention.rocks\" rel=\"nofollow noopener noreferrer\">webmention.rocks\u003C/a>, but I would appreciate it if you left me a mention as well ðŸ˜ƒ\u003C/p>\n\u003Ch3>Publishing short-form content such as replies, likes and bookmarks: A notes post type\u003C/h3>\n\u003Cp>The next thing I wanted to add to my website was sending webmentions. But before I implemented that, I wanted a way to publish short content without spamming my blog feed. For this, I created a new post type called \u003Ca href=\"https://tiim.ch/mf2\" rel=\"nofollow noopener noreferrer\">notes\u003C/a>. The list of notes lives on the /mf2 page because I plan to mostly use it to publish notes that contain microformats2 classes such as replies and likes. Another reason I didn't want to make it accessible as the /notes page is that I plan to publish my Zettelkasten notes eventually, but this is a story for another post.\u003C/p>\n\u003Cp>I also used the opportunity to add an RSS feed for all my posts, pages, projects, and notes: \u003Ca href=\"https://tiim.ch/full-rss.xml\" rel=\"nofollow noopener noreferrer\">full-rss.xml\u003C/a>. I do not recommend you subscribe to it unless you are curious about all changes to the content on my website.\u003C/p>\n\u003Ch3>Notifying referenced websites: Sending Webmentions\u003C/h3>\n\u003Cp>Sending webmentions was easy compared to receiving webmentions:\u003C/p>\n\u003Cp>On a regular interval (and on page builds), the server loads the full RSS feed and checks what items have a newer timestamp than the last time. It then extracts a list of all URLs from that feed item and loads the list of URLs that it extracted last time. Then a webmention is sent to all the URLs.\u003C/p>\n\u003Cp>Luckily I did not have to implement any of this myself apart from some glue code to fit it together: I used the library \u003Ca href=\"https://github.com/go-co-op/gocron\" rel=\"nofollow noopener noreferrer\">gocron\u003C/a> for scheduling the regular intervals, \u003Ca href=\"https://github.com/mmcdole/gofeed\" rel=\"nofollow noopener noreferrer\">gofeed\u003C/a> for parsing the RSS feed and \u003Ca href=\"https://willnorris.com/go/webmention\" rel=\"nofollow noopener noreferrer\">webmention\u003C/a> for extracting links and sending webmentions.\u003C/p>\n\u003Ch3>In the future: IndieAuth\u003C/h3>\n\u003Cp>The next thing on my roadmap is implementing IndieAuth. Although not because I have a real use case for it, but because I'm interested in OAuth, the underlying standard, and this seems like a good opportunity to get a deeper understanding of the protocol.\u003C/p>\n\u003Cp>Although, before I start implementing the next things, I should probably focus on writing blog posts first. There is no use in the most advanced blogging system if I can't be bothered to write anything.\u003C/p>\u003Cdiv class=\"mf2\">\u003Cblockquote class=\"syndication\">This post is also on \u003Cul>\u003Cli>\u003Ca class=\"u-syndication\" href=\"https://news.indieweb.org/en\">news.indieweb.org\u003C/a>\u003C/li>\u003C/ul>\u003C/blockquote>\u003C/div>\n","blog/2022-12-indiewebifying-my-website-part-1","3b342241-c414-4670-bd22-03e13d6531b7",["Date","2022-11-12T10:55:14.000Z"],[9],"IndieWebifying my Website Part 1 - Microformats and Webmentions",["Date","2022-12-03T20:56:54.000Z"],"This site now supports sending and receiving webmentions and surfacing structured data using microformats2.","https://i.imgur.com/FpgIBxI.jpg",[35,36,37,38,15,39],"IndieWeb","Webmentions","mf2","tiim.ch","indiego",[41],"https://news.indieweb.org/en","\u003Cp>A few weeks ago, I stumbled on one of \u003Ca href=\"https://www.jvt.me/posts/2019/08/21/rsvp-from-your-website/\">Jamie Tanna's blog posts about microformats2\u003C/a> by accident. That is when I first learned about the wonderful world of the \u003Ca href=\"https://indieweb.org/why\">IndieWeb\u003C/a>. It took me a while to read through some of the concepts of the IndieWeb like webmentions, IndieAuth, microformats and all the other standards, but the more I found out about it the more I wanted to play around with it. And what better place to try out new technology than on a personal website?\u003C/p>",[15,39,44,37,38,45],"indieweb","webmentions",[47,53,59,64,70,75,81,87],{"id":48,"type":49,"replyTo":13,"timestamp":50,"page":26,"url":51,"content":13,"name":52},"41435fdd-5fd2-4175-b9ea-ef9ce0dec154","webmention","2023-09-02T19:26:59Z","https://evgenykuznetsov.org/en/reactions/2022/like-337215655/","Evgeny Kuznetsov",{"id":54,"type":49,"replyTo":13,"timestamp":55,"page":26,"url":56,"content":57,"name":58},"68bd3601-4f00-42c1-b28c-1f2ef75ac851","2023-08-02T09:10:03Z","https://tiim.ch/projects/indiego","I blogged about creating a comment system for my website a while ago,\nand later how I implemented webmentions into that same project.\nSince then this little go program has grown quite a bit, and it has turned into a modular platform\nthat supports quite a few technologies:...","Tim Bachmann",{"id":60,"type":49,"replyTo":13,"timestamp":61,"page":26,"url":62,"content":63,"name":58},"5f508a42-8b83-4c10-9f7e-9c1b80e23ab1","2022-12-09T10:49:06Z","https://tiim.ch/blog/2022-12-storj-cloudflare-image-hosting","Learn how to setup affordable image hosting for your personal website with Storj.io and Cloudflare.",{"id":65,"type":49,"replyTo":13,"timestamp":66,"page":26,"url":67,"content":68,"name":69},"dc8dbf30-ff1f-4e13-ba36-37f12666005c","2022-12-05T08:41:07Z","https://martymcgui.re/2022/12/05/033926/","â˜… Liked https://tiim.ch/blog/2022-12-indiewebifying-my-website-part-1","https://martymcgui.re/",{"id":71,"type":49,"replyTo":13,"timestamp":72,"page":26,"url":73,"content":13,"name":74},"6f6c1f11-2ae0-41a4-b7d0-e343ef63aa52","2022-11-27T22:32:27Z","https://brid.gy/like/twitter/tiimb/1591417020557525003/48372745","Jimmy Lipham",{"id":76,"type":49,"replyTo":13,"timestamp":77,"page":26,"url":78,"content":79,"name":80},"5e1c4149-8fb9-48fb-b285-5efbd626b259","2022-11-27T22:31:57Z","https://brid.gy/repost/twitter/tiimb/1591417020557525003/1591418692008558592","I published a new blog post:\nIndieWebifying my Website Part 1 - Microformats and Webmentions\ntiim.ch/blog/2022-12-iâ€¦\n#indieweb #microformats #webmentions #golang","Golang Smart Bot",{"id":82,"type":49,"replyTo":13,"timestamp":83,"page":26,"url":84,"content":85,"name":86},"6e0bf830-1735-42a2-9aa2-ea4c40ab7a45","2022-11-15T12:47:35Z","https://webmention.rocks/receive/1/f0fa5421056e068fe902932ef98f6d71","This test verifies that you accept a Webmention request that contains a valid source and target URL. To pass this test, your Webmention endpoint must return either HTTP 200, 201 or 202 along with the appropriate headers.\nIf your endpoint returns HTTP 201, then it MUST also return a Location header. If it returns HTTP 200 or 202, then it MUST NOT include a Location header.","Webmention Rocks!",{"id":88,"type":49,"replyTo":13,"timestamp":89,"page":26,"url":90,"content":91,"name":92},"4e237d08-9f22-480e-a46e-8f40adf06c5e","2022-11-13T08:34:12Z","https://www.jvt.me/mf2/2022/11/rm8as/","Liked\nIndieWebifying my Website Part 1 - Microformats and Webmentions\nPost detailsThis site now supports sending and receiving webmentions and surfacing structured data using microformats2. https://i.imgur.com/FpgIBxI.jpg","Jamie Tanna",{"html":94,"slug":95,"uuid":96,"date":97,"created":98,"aliases":99,"title":100,"published":11,"modified":101,"description":102,"cover_image":103,"content_tags":104,"abstract":107,"tags":108,"links":-1,"type":20,"folder":21,"comments":109,"latestComment":23},"\u003Cp>I recently have been looking around for a simple commenting system to integrate into my website. Since my website is a pre-rendered static Html site hosted on \u003Ca href=\"https://pages.github.com\" rel=\"nofollow noopener noreferrer\">Github Pages\u003C/a>, there is no way for it to directly store comments because it does not have a database. The only option for dynamic content to be stored is with an external service.\u003C/p>\n\u003Cp>I kept my eyes open for a service that I liked, but I did not want to just integrate any old service into my website, I did have some requirements:\u003C/p>\n\u003Cul>\n\u003Cli>The service should not cost anything. I would rather host something myself than sign up for another subscription (because I'm already paying for a VPS anyway).\u003C/li>\n\u003Cli>I want to control how the comments on my website are displayed. I quite like my website design and I don't want a generic comment box below my posts.\u003C/li>\n\u003Cli>The service should respect the privacy of the people using my website.\u003C/li>\n\u003Cli>There should be an option to comment without setting up an account with the service.\u003C/li>\n\u003C/ul>\n\u003Cp>While looking around for how other people integrated comments into their static websites, I found a nice \u003Ca href=\"https://averagelinuxuser.com/static-website-commenting/\" rel=\"nofollow noopener noreferrer\">blog post from Average Linux User\u003C/a> which compares a few popular commenting systems.\nUnfortunately, most systems either are not very privacy-friendly, cost money or store the comments as comments on Github issues..?\nAfter looking through the options I decided to use this opportunity to write my own commenting system and dabble with the Go programming language.\u003C/p>\n\u003Ch2>Writing a commenting API in Go\u003C/h2>\n\u003Cp>First thing first, if you want to take a look at the code, check out the \u003Ca href=\"https://github.com/Tiim/IndieGo\" rel=\"nofollow noopener noreferrer\">Github repo\u003C/a>.\u003C/p>\n\u003Cp>I decided to write the commenting system in Go because I have been looking for an excuse to practice Go for a while, and this seemed like the perfect fit. It is a small CRUD app, consisting of a storage component, an API component and a small event component in the middle to easily compose the functionality I want.\u003C/p>\n\u003Cp>Currently, it supports the following functionality:\u003C/p>\n\u003Cul>\n\u003Cli>Listing all comments (optionally since a specified timestamp)\u003C/li>\n\u003Cli>Listing all comments for a specified page (optionally since a specified timestamp)\u003C/li>\n\u003Cli>Posting comments through the API\u003C/li>\n\u003Cli>A simple admin dashboard that lists all comments and allows the admin to delete them\u003C/li>\n\u003Cli>Email notifications when someone comments\u003C/li>\n\u003Cli>Email notifications when someone replies to your comment\u003C/li>\n\u003Cli>SQLite storage for comments\u003C/li>\n\u003C/ul>\n\u003Cp>The code is built in a way to make it easy to customise the features.\nFor example to disable features like the email reply notifications you can just \u003Ca href=\"https://github.com/Tiim/IndieGo/blob/master/main.go#L52\" rel=\"nofollow noopener noreferrer\">comment out the line in the main.go\u003C/a> file that registers that hook.\u003C/p>\n\u003Cp>To write custom hooks that get executed when a new comment gets submitted or one gets deleted, just implement the \u003Ca href=\"https://github.com/Tiim/IndieGo/blob/master/event/handler.go\" rel=\"nofollow noopener noreferrer\">Handler\u003C/a> interface and register it in the main method.\u003C/p>\n\u003Cp>You can also easily add other storage options like databases or file storage by implementing the \u003Ca href=\"https://github.com/Tiim/IndieGo/blob/master/model/store.go\" rel=\"nofollow noopener noreferrer\">Store and SubscribtionStore\u003C/a> interfaces.\u003C/p>\n\u003Ch2>Can it be used in production? ðŸš—ðŸ’¨\u003C/h2>\n\u003Cp>I currently use it on this website! Go test it out (I might delete the comments if they are rude though ðŸ¤”).\u003C/p>\n\u003Cp>In all seriousness, I would not use it for a website where the comments are critical. But for a personal blog or similar, I don't see why not.\u003C/p>\n\u003Cp>If you want to host your own version, there is a Dockerfile available. If you decide to integrate this into your website, please comment below, ping me \u003Ca href=\"https://twitter.com/TiimB\" rel=\"nofollow noopener noreferrer\">@TiimB\u003C/a> or shoot me an email \u003Ca href=\"mailto:hey@tiim.ch\">hey@tiim.ch\u003C/a>, I would love to check it out.\u003C/p>","blog/2022-07-12-first-go-project-commenting-api","bff14052-4f3f-4dcb-bcee-155ae1c6b09e",["Date","2022-07-12T00:00:00.000Z"],["Date","2022-07-08T16:24:37.766Z"],[9],"First Go Project: A Jam-stack Commenting API",["Date","2022-11-23T21:42:29.000Z"],"I built my first project using the Go programming language: A commenting API for the jam-stack. It is simple but easily extensible. And it powers the commenting feature of this website!","/assets/2022-07-first-go-project-commenting-api.png",[15,105,106,38,39],"web-api","project","\u003Cp>I recently have been looking around for a simple commenting system to integrate into my website. Since my website is a pre-rendered static Html site hosted on \u003Ca href=\"https://pages.github.com\">Github Pages\u003C/a>, there is no way for it to directly store comments because it does not have a database. The only option for dynamic content to be stored is with an external service.\u003C/p>",[15,39,106,38,105],[110,113,120,127,132,138,142,147,154,160,165],{"id":111,"type":49,"replyTo":13,"timestamp":112,"page":95,"url":56,"content":57,"name":58},"31ec5f44-15b2-498a-890d-350e38b9a83e","2023-08-02T09:10:04Z",{"id":114,"type":115,"replyTo":13,"timestamp":116,"page":95,"url":117,"content":118,"name":119},"6d792d24-ba58-4408-83a4-3583667ff4ad","comment","2023-07-09T19:25:02Z","https://tiim.ch/blog/2022-07-12-first-go-project-commenting-api#6d792d24-ba58-4408-83a4-3583667ff4ad","Heya just saw your post on Reddit about this comment feature, didn't want to leave without using it ^^. Nicely done!","Anonymous",{"id":121,"type":115,"replyTo":122,"timestamp":123,"page":95,"url":124,"content":125,"name":126},"99dd9ccf-5349-4f41-9553-67986e1a1074","1c8ba0da-10df-4a7a-b067-55875441de2d","2022-12-07T23:01:37Z","https://tiim.ch/blog/2022-07-12-first-go-project-commenting-api#99dd9ccf-5349-4f41-9553-67986e1a1074","You are right, there is not any documentation in the readme yet. Although hopefully, I will work on that soon. I'm in the middle of refactoring the project.\n\nTo query the comments there are two rest endpoints [\"/comment\"](https://github.com/Tiim/IndieGo/blob/044b58e96dae112ceaca509f8541c84db3ef50f3/api/comment.go#L41-L71) and [\"/comment/:page\"](https://github.com/Tiim/IndieGo/blob/044b58e96dae112ceaca509f8541c84db3ef50f3/api/comment.go#L73-L107) which return all comments or the comments for a specific page. The comments are loaded from this API endpoint when the site is generated.\n\nTo display the comments without rebuilding the site, new comments are fetched in the browser with the \"?since=\u003Ctime-of-last-build>\" query parameter.","Tiim",{"id":122,"type":115,"replyTo":13,"timestamp":128,"page":95,"url":129,"content":130,"name":131},"2022-12-07T22:33:44Z","https://tiim.ch/blog/2022-07-12-first-go-project-commenting-api#1c8ba0da-10df-4a7a-b067-55875441de2d","Good stuff. Always nice to see a site supporting comments and/or Webmentions. Maybe I missed it in the readme but I am curious as to how one queries the API for comments. Do you pull in the comments from the database when you generate the site?","Poorchop",{"id":133,"type":49,"replyTo":13,"timestamp":134,"page":95,"url":135,"content":136,"name":137},"e42756e4-d5a5-4727-8c58-434d285b7ab3","2022-11-27T22:31:58Z","https://brid.gy/repost/twitter/tiimb/1546801590593638400/1546801615264415745","I published a new blog post:\nFirst Go Project: A jam-stack Commenting API\ntiim.ch/blog/2022-07-1â€¦\n#golang #jamstack #API","Golang Bot",{"id":139,"type":49,"replyTo":13,"timestamp":140,"page":95,"url":141,"content":32,"name":58},"b8d3ae8b-0059-4379-8c35-30c97269908f","2022-11-21T22:19:23Z","https://tiim.ch/blog/2022-12-indiewebifying-my-website-part-1",{"id":143,"type":115,"replyTo":13,"timestamp":144,"page":95,"url":145,"content":146,"name":146},"171e3444-f1d0-492d-8bc7-c0a133a41783","2022-07-18T08:44:11Z","https://tiim.ch/blog/2022-07-12-first-go-project-commenting-api#171e3444-f1d0-492d-8bc7-c0a133a41783","hola",{"id":148,"type":115,"replyTo":149,"timestamp":150,"page":95,"url":151,"content":152,"name":153},"5875bba1-e69b-467a-bab5-23ef4160d257","621574fd-eea2-48d6-87c8-aebd0f05f1aa","2022-07-13T21:06:11Z","https://tiim.ch/blog/2022-07-12-first-go-project-commenting-api#5875bba1-e69b-467a-bab5-23ef4160d257","And a polite reply","polite",{"id":155,"type":115,"replyTo":13,"timestamp":156,"page":95,"url":157,"content":158,"name":159},"8494c653-ef37-47a2-ae1b-00d00e4815a9","2022-07-13T18:31:31Z","https://tiim.ch/blog/2022-07-12-first-go-project-commenting-api#8494c653-ef37-47a2-ae1b-00d00e4815a9","Pretty cool dudez","somGuy",{"id":149,"type":115,"replyTo":13,"timestamp":161,"page":95,"url":162,"content":163,"name":164},"2022-07-12T21:40:39Z","https://tiim.ch/blog/2022-07-12-first-go-project-commenting-api#621574fd-eea2-48d6-87c8-aebd0f05f1aa","This is a rude comment ;)","rude",{"id":166,"type":115,"replyTo":13,"timestamp":167,"page":95,"url":168,"content":169,"name":170},"fb6278ae-e48c-4397-ba29-bec4e5cb3a57","2022-07-12T13:30:14Z","https://tiim.ch/blog/2022-07-12-first-go-project-commenting-api#fb6278ae-e48c-4397-ba29-bec4e5cb3a57","Good job dude!","wdup",{"html":172,"slug":173,"uuid":174,"title":175,"date":176,"modified":9,"section":177,"published":11,"cover_image":103,"content_tags":178,"links":182,"abstract":185,"tags":186,"type":20,"description":13,"folder":187,"comments":188,"latestComment":23},"\u003Cp>I blogged about creating a comment system for my website \u003Ca href=\"https://tiim.ch/blog/2022-07-12-first-go-project-commenting-api\" rel=\"nofollow noopener noreferrer\">a while ago\u003C/a>,\nand later how I \u003Ca href=\"https://tiim.ch/blog/2022-12-indiewebifying-my-website-part-1\" rel=\"nofollow noopener noreferrer\">implemented webmentions into that same project\u003C/a>.\nSince then this little go program has grown quite a bit, and it has turned into a modular platform\nthat supports quite a few technologies:\u003C/p>\n\u003Cul>\n\u003Cli>The basic commenting system\u003C/li>\n\u003Cli>Sending and receiving webmentions\u003C/li>\n\u003Cli>Micropub server implementation\u003C/li>\n\u003Cli>IndieAuth (decentralized authentication standard based on OAuth)\u003C/li>\n\u003Cli>Admin dashboard\u003C/li>\n\u003Cli>Admin backup endpoint\u003C/li>\n\u003C/ul>\n\u003Cp>Currently I am working on supporting AcitvityPub, so people can follow my blog through the fediverse, and\ncomments through the fediverse show up back on my website.\u003C/p>\n\u003Cp>The architecture of the application is inspired by the Caddy webserver, where every feature is implemented as a plugin, and the core\nof the application is only concerned with initializing those plugins.\u003C/p>\n\u003Cp>If you have any questions, or want to run IndieGo yourself, don't hesitate to \u003Ca href=\"https://tiim.ch/contact\" rel=\"nofollow noopener noreferrer\">contact me\u003C/a>.\u003C/p>","projects/indiego","0cf125b3-a99a-4996-8f84-ec5105d64c57","IndieGo",["Date","2023-08-02T08:39:00.000Z"],"Projects",[15,179,44,17,180,181],"golang","sqlite","dev",[183,184],"\u003Cp>\u003Ca href=\"https://github.com/Tiim/IndieGo\" rel=\"nofollow noopener noreferrer\">IndieGo Github\u003C/a>\u003C/p>","\u003Cp>\u003Ca href=\"https://comments.tiim.ch\" rel=\"nofollow noopener noreferrer\">Admin Interface\u003C/a> - authentication required\u003C/p>","\u003Cp>I blogged about creating a comment system for my website \u003Ca href=\"https://tiim.ch/blog/2022-07-12-first-go-project-commenting-api\">a while ago\u003C/a>,\nand later how I \u003Ca href=\"https://tiim.ch/blog/2022-12-indiewebifying-my-website-part-1\">implemented webmentions into that same project\u003C/a>.\nSince then this little go program has grown quite a bit, and it has turned into a modular platform\nthat supports quite a few technologies:\u003C/p>",[181,17,15,179,44,180],"projects",[189],{"id":190,"type":49,"replyTo":13,"timestamp":191,"page":173,"url":192,"content":193,"name":194},"3ec71b12-8097-4ea8-a1d3-a58bcd269bf7","2023-11-12T16:16:35Z","https://starrwulfe.xyz/2023/11/12/11/16/wordpress-go-boom/","At some point yesterday, my WordPress instance (thus the place where the thing youâ€™re reading right now came from) ran out of memory.\nðŸ¤” I suspect itâ€™s because Iâ€™m asking it to do too much:\nBasic Blog stuff\nWebmention/Indieweb/Microformats stuff...","starrwulfe",{"tag":15}],"uses":{"params":["slug"]}}]}
