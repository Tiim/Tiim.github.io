{"type":"data","nodes":[{"type":"data","data":[{"footer":1},{"html":2,"slug":3,"uuid":4,"created":5,"date":6,"published":7,"abstract":8,"tags":9,"links":-1,"type":10,"cover_image":-1,"description":11,"folder":12},"\u003Cp>Built with SvelteKit and hosted on GitHub Pages.\u003C/p>\n\u003Cp>View this website on \u003Ca href=\"https://github.com/Tiim/Tiim.github.io\" rel=\"nofollow noopener noreferrer\">GitHub\u003C/a>!\u003C/p>\n\u003Ch2>Other pages\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://tiim.ch/pages/links\" rel=\"nofollow noopener noreferrer\">Links and Blogroll\u003C/a>\u003C/li>\n\u003C/ul>","footer","e556fd14-3acd-4a7b-9b31-929fdd6d2b7a",["Date","2023-07-31T20:16:19.000Z"],["Date","2023-07-31T20:16:19.000Z"],true,"\u003Cp>Built with SvelteKit and hosted on GitHub Pages.\u003C/p>",[],"article","","metadata"],"uses":{}},{"type":"data","data":[{"posts":1,"details":25},[2],{"html":3,"slug":4,"uuid":5,"date":6,"created":7,"aliases":8,"title":9,"published":10,"modified":8,"description":11,"cover_image":12,"cover_image_txt":13,"content_tags":14,"abstract":19,"tags":20,"links":-1,"type":21,"folder":22,"comments":23,"latestComment":24},"\u003Cblockquote class=\"callout callout-note\">\n\u003Cspan class=\"callout-title\">\u003Cspan class=\"callout-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\u003Cpath d=\"M64 32C28.7 32 0 60.7 0 96v320c0 35.3 28.7 64 64 64h226.7c17 0 33.3-6.7 45.3-18.7l93.3-93.3c12-12 18.7-28.3 18.7-45.3V96c0-35.3-28.7-64-64-64H64zm0 64h320v224h-64c-17.7 0-32 14.3-32 32v64H64V96z\">\u003C/path>\u003C/svg>\u003C/span>Note\u003C/span>\u003Cp>This post is meant as a reference for myself. I only published it in case someone else might find it interesting.\nI did not spend much time on this post.\u003C/p>\n\u003C/blockquote>\n\u003Cp>I do host some services on a few rented VPS servers and on my \"home lab\", which is just an old desktop that is running in the basement.\nWhen I got into self-hosting, I decided I would host everything exclusively in docker, which has served me pretty well over the last few years. In the last while I\nhave learned a lot about Kubernetes, and am strongly considering switching my \"simple\" hosting setup for a more complex Kubernetes cluster. So before I do that I want\nto write down what my current setup looks like.\u003C/p>\n\u003Ch2>Setup\u003C/h2>\n\u003Cp>\u003Cimg src=\"https://media.tiim.ch/0887e318-9359-4753-abaf-49ae7c26dfcd.webp\" alt=\"\">\u003C/p>\n\u003Cp>As mentioned, everything is hosted in docker containers. Generally, I try to keep everything in docker-compose, since this allows me to specify the settings of the container once, and easily modify it later.\nTo have multiple services available on port 80 and 443, I use the Traeffik (Software) reverse proxy. I use Traefik without a config file, meaning it pulls the routes and rules directly from the labels of the\nrunning containers on the VPS. This makes it easy to launch a new service and have its reverse proxy config directly in the docker-compose file.\u003C/p>\n\u003Cp>Since many services use a database, and Postgres seems to be supported by many open-source projects, I decided to have a central Postgres instance running in a docker container. This allows me to\nback it up with a simple cron job in a single place. If a service does not support Postgres, I specify its database directly in the docker-compose file.\u003C/p>\n\u003Cp>Almost all services use disk access for either config, local files, or similar. I do have a docker folder that is the root of all locally stored files.\u003C/p>\n\u003Ch2>OS Setup\u003C/h2>\n\u003Cp>When I first started, I configured everything by hand, and documented how, why, and what I did. However I was not happy with this, I could not test it out and it was prone to errors.\nTherefore, I decided to use Ansible to set up the server and install all dependencies.\nThis worked well, so well that I decided that Ansible was good enough to use to operate the entire pipeline, even to automate the deployment of the services.\u003C/p>\n\u003Ch2>Deployment\u003C/h2>\n\u003Cp>I do have an ansible role per service, with its configuration (mostly) as ansible YAML files, and the docker-compose files and other config files as ansible templates. This worked great, with a single ansible-playbook command I can\nmake sure everything is running and has the right config.\nFor most services, I even built logic to make sure that when the docker-compose file or a config file changes, the container is restarted.\u003C/p>\n\u003Ch2>The good parts\u003C/h2>\n\u003Cp>I am quite happy with this system in general. Everything runs stable, backups are easy and automated, and deployments for services that are already configured are a breeze.\nI can keep the whole \"description\" of what is running in a single git repo, and make changes by editing config files.\nThis is a huge step up from manually deploying and keeping track of what docker commands to use for what service.\u003C/p>\n\u003Ch2>The not so good parts\u003C/h2>\n\u003Cp>Recently I noticed some pain points.\u003C/p>\n\u003Col>\n\u003Cli>If I want to deploy a service twice for two domain names, I have to create a copy of the role. This unfortunately leads to duplicated \"code\" which can (and does) lead to configuration drift.\u003C/li>\n\u003Cli>I have to code things myself that already exist. For example, restarting a container when a config value changes. For most services this is implemented, but not everywhere, and also not for all possible things that can be changed. This is not what I want to be concentrating on if I am writing the config to deploy a service.\u003C/li>\n\u003C/ol>\n\u003Cp>In general, I seem to have built a worse subset of Kubernetes myself, just without the robustness that makes Kubernetes so interesting.\u003C/p>\n\u003Ch2>My plan for the future\u003C/h2>\n\u003Cp>I am planning to replace docker with Kubernetes, specifically K3s (Software), a very lightweight and mostly \"batteries included\" Kubernetes distribution.\nAnsible will stay, but only as a tool to set up and configure the OS, install dependencies, and install and run K3S. Deployment of services I either want to do directly using the kubectl command line tool, or more likely using\nArgoCD, a project that pulls Kubernetes manifests from a Git repository and automatically deploys it.\u003C/p>\n\u003Cp>For the configuration, I will take a look at Helm (Software).\u003C/p>","blog/2023-12-03-my-selfhosting-setup","3af67a63-5f3a-422c-8aee-5e3daa8921f9",["Date","2023-12-04T08:00:00.000Z"],["Date","2023-12-03T21:08:16.000Z"],null,"My Selfhosting Setup",true,"A short overview on how I self-host.","https://media.tiim.ch/4a0a43eb-cf95-4273-b6a6-e085c9123985.webp","Model: realvisxlV20_v20Bakedvae; beach sunset, palms, calm ocean, fine sand, cinematic shot, photorealistic ## (worst quality)",[15,16,17,18],"ansible","docker","traefik","server","\u003Cp>[!NOTE]\nThis post is meant as a reference for myself. I only published it in case someone else might find it interesting.\nI did not spend much time on this post.\u003C/p>",[15,16,18,17],"article","blog",[],"2024-01-20T09:36:14Z",{"tag":17}],"uses":{"params":["slug"]}}]}
