{"type":"data","nodes":[{"type":"data","data":[{"footer":1},{"html":2,"slug":3,"uuid":4,"created":5,"date":6,"published":7,"abstract":8,"tags":9,"links":-1,"type":10,"cover_image":-1,"description":11,"folder":12},"\u003Cp>Built with SvelteKit and hosted on GitHub Pages.\u003C/p>\n\u003Cp>View this website on \u003Ca href=\"https://github.com/Tiim/Tiim.github.io\" rel=\"nofollow noopener noreferrer\">GitHub\u003C/a>!\u003C/p>\n\u003Ch2>Other pages\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://tiim.ch/pages/links\" rel=\"nofollow noopener noreferrer\">Links and Blogroll\u003C/a>\u003C/li>\n\u003C/ul>","footer","e556fd14-3acd-4a7b-9b31-929fdd6d2b7a",["Date","2023-07-31T20:16:19.000Z"],["Date","2023-07-31T20:16:19.000Z"],true,"\u003Cp>Built with SvelteKit and hosted on GitHub Pages.\u003C/p>",[],"article","","metadata"],"uses":{}},{"type":"data","data":[{"post":1,"about":21},{"html":2,"slug":3,"uuid":4,"title":5,"published":6,"description":7,"content_tags":8,"date":12,"cover_image":13,"abstract":14,"tags":15,"links":-1,"type":17,"folder":18,"comments":19,"latestComment":20},"\u003Ch2>The problem\u003C/h2>\n\u003Cp>Let's say you have a rest API with the following endpoint that returns all of the books in your database:\u003C/p>\n\u003Cpre>\u003Ccode class=\"language-rest\">GET /book/\n\u003C/code>\u003C/pre>\n\u003Cp>Your SQL query might look like something like this\u003C/p>\n\u003Cpre>\u003Ccode class=\"language-sql\">SELECT *\nFROM books\n\u003C/code>\u003C/pre>\n\u003Cp>Sometimes you want to only list books, for example, from a specific author. How do we do this in SQL?\u003C/p>\n\u003Ch2>Naive solution: String concatenation ✂\u003C/h2>\n\u003Cp>One way would be to concatenate your sql query something like this:\u003C/p>\n\u003Cpre>\u003Ccode class=\"language-js\">const arguments = [];\nconst queryString = \"SELECT * FROM books WHERE true\";\nif (authorFilter != null) {\n  queryString += \"AND author = ?\";\n  arguments.push(authorFilter);\n}\ndb.query(queryString, arguments);\n\u003C/code>\u003C/pre>\n\u003Cp>I'm not much of a fan of manually concatenating strings.\u003C/p>\n\u003Ch2>The coalesce function 🌟\u003C/h2>\n\u003Cp>Most Databases have the function \u003Ccode>coalesce\u003C/code> which accepts a variable amount of arguments and returns the first argument that is not null.\u003C/p>\n\u003Cpre>\u003Ccode class=\"language-sql\">-- Examle\nSELECT coalesce(null, null, 'tiim.ch', null, '@TiimB') as example;\n\n-- Will return\n\nexample\n---------\ntiim.ch\n\u003C/code>\u003C/pre>\n\u003Cp>But how will this function help us?\u003C/p>\n\u003Ch2>Optional filters with the coalesce function\u003C/h2>\n\u003Cpre>\u003Ccode class=\"language-sql\">SELECT *\nFROM books\nWHERE\n  author = coalesce(?, author);\n\u003C/code>\u003C/pre>\n\u003Cp>If the filter value is null the coalesce expression will resolve to \u003Ccode>author\u003C/code>\nand the comparison \u003Ccode>author = author\u003C/code> will be true.\u003C/p>\n\u003Cp>If on the other hand the value is set for example to Shakespeare then the author will be compared to Shakespeare.\u003C/p>\n\u003Cp>I came across this way to implement optional filters only recently. If you have a more idiomatic way to do this let me know please ✨\u003C/p>\n\u003Cp>If you liked this post please follow me on here or on Twitter under \u003Ca href=\"https://twitter.com/TiimB\" rel=\"nofollow noopener noreferrer\">@TiimB\u003C/a> 😎\u003C/p>","blog/2019-07-sql-optional-filters-coalesce","899fb73c-a78e-4cd9-b712-1886715b2d56","How to write optional filters in SQL",true,"A simple way to filter by optional values in SQL with the COALESCE function.",[9,10,11],"SQL","quick-tip","dev",["Date","2019-07-11T00:00:00.000Z"],"/assets/2019-07-sql-optional-filters-coalesce.png","\u003Cp>Let's say you have a rest API with the following endpoint that returns all of the books in your database:\u003C/p>",[11,10,16],"sql","article","blog",[],"2024-01-20T09:36:14Z",{"html":22,"slug":23,"uuid":24,"date":25,"created":26,"published":6,"abstract":27,"tags":28,"links":-1,"type":17,"cover_image":-1,"description":29,"folder":30},"\u003Cp>Hi, my name is \u003Cspan class=\"p-name\">Tim Bachmann\u003C/span>!\nI'm a \u003Cspan class=\"p-role\">master graduate in computer science\u003C/span> at \u003Cspan class=\"p-org\">University of Basel\u003C/span>, swimmer and swim coach.\u003C/p>\n\u003Cp>I am passionate about all things web development, swimming, personal knowledge management and much more.\nIf you liked this or any of my posts, feel free to \u003Ca href=\"https://tiim.ch/follow\" rel=\"nofollow noopener noreferrer\">follow me\u003C/a>.\u003C/p>","about","d8e56802-2847-4053-b213-9b004f1b965c",["Date","2022-10-15T00:00:00.000Z"],["Date","2022-10-15T19:47:09.652Z"],"\u003Cp>Hi, my name is {{name}}!\nI'm a {{role}} at {{org}}, swimmer and swim coach.\u003C/p>",[],"","metadata"],"uses":{"params":["slug"]}}]}
